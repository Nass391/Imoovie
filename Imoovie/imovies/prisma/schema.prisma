// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
    userId       Int
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id        Int        @id @default(autoincrement())
    name  String?
    email     String     @unique
    emailVerified DateTime?
    image         String?
    profile   Profile?
    favorites Favorite[]
    comments  Comment[]
    sessions  Session[]
    rates     Rate[]
    accounts  Account[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    role      Role       @default(USER)

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Movie {


id Int @id @default(autoincrement())
title String
overview String @db.VarChar(500)
release_date DateTime
genres GenresOnMovies[]
vote_average Float
imageUrl String?




}

model Genre {
    id     Int              @id @default(autoincrement())
    name   String
    movies GenresOnMovies[]
}

model GenresOnMovies {
    movie      Movie    @relation(fields: [movieId], references: [id])
    movieId    Int // relation scalar field (used in the `@relation` attribute above)
    genre      Genre    @relation(fields: [genreId], references: [id])
    genreId    Int // relation scalar field (used in the `@relation` attribute above)
    assignedAt DateTime @default(now())
    assignedBy String



    @@id([movieId, genreId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    title     String   @db.VarChar(255)
    content   String?
    author    User     @relation(fields: [authorId], references: [id])
    authorId  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
}

model Profile {
    id     Int    @id @default(autoincrement())
    user   User   @relation(fields: [userId], references: [id])
    userId Int    @unique
    tag    String

}

model Favorite {
    user       User     @relation(fields: [userId], references: [id])
    userId     Int // relation scalar field (used in the `@relation` attribute above)
    movieId    Int // relation scalar field (used in the `@relation` attribute above)
    assignedAt DateTime @default(now())



    @@id([userId])
}

model Rate {
    user         User     @relation(fields: [userId], references: [id])
    userId       Int // relation scalar field (used in the `@relation` attribute above)
    movieId      Int // relation scalar field (used in the `@relation` attribute above)
    vote_average Float
    assignedAt   DateTime @default(now())



    @@id([userId])
}

enum Role {
    USER
    ADMIN
}
